# üì¶ GESTI√ì DE PRODUCTOS
# -----------------------------------------------------------------------------
# Author: Carlos Andres Alzate | Fecha 25 - 05 -2025
# Descripci√≥n: Este script permite gestionar productos en una lista.
# Funcionalidades: agregar, mostrar, buscar y eliminar productos.
# Cada producto tiene: nombre, categor√≠a y precio.
# Estructura simple pero pensada para poder escalar luego.

# Lista principal de productos (Precargados como ejemplo).
# Cada producto es una sublista: [nombre, categoria, precio]
product_list = [
    {"name": "pan", "category": "panaderia", "price": 120},
    {"name": "abaco", "category": "jugueteria", "price": 300},
    {"name": "tomate", "category": "verduleria", "price": 40},
    {"name": "bife chorizo", "category": "carne", "price": 500},
]

# Men√∫ de opciones del sistema
menu_opcion = [
    "Agregar producto",
    "Mostrar productos",
    "Buscar producto",
    "Eliminar producto",
    "Salir",
]

# S√≠mbolo decoratico para el input
symbol = ">"

# Controla el ciclo principal del programa
is_running = True

# Titulo de bienvenida
print("=" * 40)
print("üì¶ BIENVENIDO A LA GESTI√ìN DE PRODUCTOS üì¶")
print("=" * 40)

# üîÅ Bucle principal
while is_running:
    # muestro el menu
    print("\n--- Men√∫ Principal ---\n")

    # Se imprime el men√∫  con √≠ndices numerado
    for i, option in enumerate(menu_opcion, 1):
        print(f"{i}. {option.title()}")
    print("")

    # Solicita al usuario una opci√≠n del men√∫
    user_input = input(f"Ingrese una opcion (1-{len(menu_opcion)})\n{symbol} ").strip()

    # Validaciones: entrada vac√≠a o no num√©rica
    if not user_input:
        print("‚ùå Entrada vac√≠a. Cerrando el programa.")
        break

    if not user_input.isdigit():
        print("‚ùå Debe ingresar un n√∫mero v√°lido.")
        continue

    # Conversi√≥n sergura de entrada a entero
    option = int(user_input)

    if option < 1 or option > len(menu_opcion):
        print(f"‚ö†Ô∏è Opci√≥n inv√°lida. Ingrese un n√∫mero entre 1 y {len(menu_opcion)}.")
        continue

    # Opci√≥n "salir"
    if option == 5:
        is_running = False
        break

    # üìå Men√∫ principal controlado con match-case
    match option:
        case 1:
            # ---------------------------------
            # Opci√≥n 1: Agregar nuevo producto
            # ---------------------------------
            print("\n--- ‚ûï Agregar un nuevo producto ‚ûï  ---")
            print("Presione Enter en cualquier campo para volver al men√∫.\n")

            while True:
                new_product = {}

                # Ingreso del nombre del producto
                name = input("Nombre del Producto: ").strip()
                if not name:
                    break
                found = False
                for product in product_list:
                    if product["name"].lower() == name.lower():
                        found = True
                        print(
                            f"\nüö´ El producto << {product['name'].upper()} >> ya existe üö´"
                        )
                        print(f"""
                            \r‚úÖ Producto encontrado ‚úÖ
                            \rüõçÔ∏è Nombre: {product["name"].title()}
                            \rüè∑Ô∏è Categor√≠a: {product["category"].title()}
                            \rüí≤ Precio:     ${product["price"]}
                            """)
                        break

                if found:
                    break
                # products_ = product_list.keys()
                # print(products_)
                # Ingreso de la categoria
                category = input("Categoria del producto: ").strip()
                if not category:
                    break

                # Ingreso del precio
                price = input("Precio del producto: ").strip()
                if not price:
                    break

                if not price.isdigit():
                    print("‚ö†Ô∏è El precio debe ser un n√∫mero.")
                    continue

                # Se almacena el producto en la lista
                new_product["name"] = name.lower()
                new_product["category"] = category.lower()
                new_product["price"] = int(price)
                product_list.append(new_product)

                # Confirmacion visual del producto agregado
                print("\n‚úÖ ¬°Producto agregado exitosamente!")
                print(f"""
                    \rüì¶ {"Nombre:":<15} {new_product.get("name").title():<15}
                    \rüè∑Ô∏è {"Categor√≠a:":<15} {new_product.get("category").title():<15}
                    \rüí≤ {"Precio:":<15} ${new_product.get("price"):<15}
                    """)
                break

        case 2:
            # ---------------------------------
            # Opci√≥n 2: Mostrar productos
            # ---------------------------------
            print("\n-- üì¶ Lista de Productos --")
            print("Presione Enter en cualquier campo para volver al men√∫.\n")
            if not product_list:
                print("No hay Productos aun")
            else:
                print("üì¶ =========================================== üì¶")
                # Ordena por nombre en orden alfabetico a - z
                for i in range(len(product_list)):
                    for j in range(len(product_list) - i - 1):
                        if product_list[j]["name"] > product_list[j + 1]["name"]:
                            # intercambiar
                            temp = product_list[j]
                            product_list[j] = product_list[j + 1]
                            product_list[j + 1] = temp
                # mostrar resultado
                print(f"{'N¬∫':2} | {'Producto':<15} | {'Categoria':<15} | {'$':<15}")
                print("================================================")
                for index, product in enumerate(product_list, start=1):
                    print(
                        f"{index:2} | {product['name'].title():<15} | {product['category']:<15} | ${product['price']}"
                    )
                print("================================================")
        case 3:
            # ---------------------------------
            # Opci√≥n 3: Buscar producto
            # ---------------------------------
            while True:
                print("\n--- üîç Buscar producto por nombre ---\n")
                print("Presione Enter en cualquier campo para volver al men√∫.\n")
                # Nota Mental: el uso de parentesis para continuar con una expresion multilenea se conoce como _implicit line continuation_
                search_name = (
                    input(
                        "Ingrese el nombre exacto del producto (o Enter para cancelar): "
                    )
                    .strip()
                    .lower()
                )

                if not search_name:
                    break

                found = False
                for prod in product_list:
                    if search_name.lower() == prod["name"].lower():
                        found = True
                        print(f"""
                            \r‚úÖ Producto encontrado ‚úÖ
                            \rüõçÔ∏è Nombre: {prod["name"].title()}
                            \rüè∑Ô∏è Categor√≠a: {prod["category"].title()}
                            \rüí≤ Precio:     ${prod["price"]}
                            """)
                        break

                    if found:
                        print("==============================================")
                    elif not found:
                        print("\n  ‚ùå ‚ùå ‚ùå ‚ùå ‚ùå ‚ùå ‚ùå ‚ùå")
                        print("‚ùå Producto no encontrado ‚ùå")
                        print("  ‚ùå ‚ùå ‚ùå ‚ùå ‚ùå ‚ùå ‚ùå ‚ùå\n")
                        break
        case 4:
            # ---------------------------------
            # Opci√≥n 4: Eliminar producto
            # ---------------------------------
            while True:
                print("\n--- üóëÔ∏è Eliminar un producto üóëÔ∏è ---")
                print("Presione Enter en cualquier campo para volver al men√∫.\n")
                if not product_list:
                    print("‚ö†Ô∏è No hay productos para eliminar.")
                    break

                print("üì¶ =========================================== üì¶")
                # Ordena por nombre en orden alfabetico a - z
                for i in range(len(product_list)):
                    for j in range(len(product_list) - i - 1):
                        if product_list[j]["name"] > product_list[j + 1]["name"]:
                            # intercambiar
                            temp = product_list[j]
                            product_list[j] = product_list[j + 1]
                            product_list[j + 1] = temp
                # mostrar resultado
                print(f"{'N¬∫':2} | {'Producto':<15} | {'Categoria':<15} | {'$':<15}")
                print("================================================")
                for index, product in enumerate(product_list, start=1):
                    print(
                        f"{index:2} | {product['name'].title():<15} | {product['category']:<15} | ${product['price']}"
                    )
                print("================================================\n")
                # product_list.sort()
                # for i, prod in enumerate(product_list, start=1):
                #     print(
                #         f"{i:2}. {prod[0].title():<15} | {prod[1].title():<12} | ${prod[2]}"
                #     )
                # print("")

                del_input = input(
                    "üëâ Ingrese el n√∫mero del producto a eliminar (o Enter para cancelar): "
                ).strip()

                if not del_input:
                    print("üîô Operaci√≥n cancelada.")
                    break

                if not del_input.isdigit():
                    print("‚ö†Ô∏è Entrada inv√°lida. Debe ingresar un n√∫mero.")
                    break

                del_index = int(del_input) - 1
                if del_index < 0 or del_index >= len(product_list):
                    print("‚ùå N√∫mero fuera de rango.")
                    break

                # print("")

                # Eliminacici√≥n confirmada
                deleted = product_list.pop(del_index)
                print(f"üóëÔ∏è Producto '{deleted['name'].title()}' eliminado con √©xito.")
                print("")
# üîö Fin del programa
